library(wooldridge)
install.packages('wooldridge')
library(wooldridge)
dim(data)
names(data)
summary(data$salary)
#library(wooldridge)
data <- ceosal1
dim(data)
names(data)
summary(data$salary)
summary(data$roe)
ols <- lm(salary ~ roe, data = data)
summary(ols)
library(wooldridge)
data <- ceosal1
dim(data)
names(data)
summary(data$salary)
summary(data$roe)
ols <- lm(salary ~ roe, data = data)
summary(ols)
library(wooldridge)
data <- ceosal1
dim(data)
names(data)
summary(data$salary)
summary(data$roe)
ols <- lm(salary ~ roe, data = data)
summary(ols)
library(wooldridge)
data <- ceosal1
dim(data)[0]
dim(data)[1]
summary(data$salary)
install.packages("devtools")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("shiny")
install_github("StatsWithR/statsr")
library(devtools)
install_github("StatsWithR/statsr")
library(dplyr)
library(ggplot2)
library(statsr)
data(arbuthnot)
force(arbuthnot)
View(arbuthnot)
arbuthnot
dim(arbuthnot)
names(arbuthnot)
arbuthnot
unique(arbuthnot$year)
arbuthnot$girls
arbuthnot['girls']
arbuthnot[girls]
library(dplyr)
library(ggplot2)
library(statsr)
data(arbuthnot)
arbuthnot
dim(arbuthnot)
names(arbuthnot)
arbuthnot$boys
# type your code for the Question 2 here, and Knit
arbuthnot$girls
ggplot(data = arbuthnot, aes(x = year, y = girls)) +
geom_point()
?ggplot
5218 + 4683
arbuthnot$boys + arbuthnot$girls
arbuthnot <- arbuthnot %>%
mutate(total = boys + girls)
ggplot(data = arbuthnot, aes(x = year, y = total)) +
geom_line()
ggplot(data = arbuthnot, aes(x = year, y = total)) +
geom_line() +
geom_point()
# type your code for the Exercise here, and Knit
arbuthnot <- arbuthnot %>%
mutate(perc_boys = boys/total)
ggplot(data = arbuthnot, aes(x = year, y = perc_boys)) +
geom_line() +
geom_point()
arbuthnot <- arbuthnot %>%
mutate(more_boys = boys > girls)
arbuthnot
data(present)
force(present)
View(present)
# type your code for Question 4 here, and Knit
dim(present)
# type your code for Exercise here, and Knit
range(present$year)
View(present)
# type your code for Question 5 here, and Knit
present <- present %>%
mutate(total = boys+girls) %>%
mutate(prop_boys = boys/total)
present
# type your code for Question 5 here, and Knit
present <- present %>%
mutate(total = boys+girls) %>%
mutate(prop_boys = boys/total)
ggplot(data=present, aes=(x=year, y=prop_boys))+
# type your code for Question 5 here, and Knit
present <- present %>%
mutate(total = boys+girls) %>%
mutate(prop_boys = boys/total)
ggplot(data=present, aes=(x=year, y=prop_boys))+
# type your code for Question 5 here, and Knit
present <- present %>%
mutate(total = boys+girls) %>%
mutate(prop_boys = boys/total)
ggplot(data=present, aes(x=year, y=prop_boys))+
geom_line()+
geom_point()
# type your code for Question 6 here, and Knit
present <- present %>%
mutate(more_boys = boys>girls)
summary(present$more_boys)
# type your code for Question 6 here, and Knit
present <- present %>%
mutate(more_boys = boys>girls)
View(present)
# type your code for Question 6 here, and Knit
present <- present %>%
mutate(more_boys = boys>girls)
summary(present$more_boys)
# type your code for Question 7 here, and Knit
present <- present %>%
mutate(prop_boy_girl = boys/girls)
ggplot(data=present, aes(x=year,y=prop_boy_girl))+
geom_line()
View(present)
# type your code for Question 8 here
present %>% arrange(desc(total))
wb <- createWorkbook(type="xlsx")
wb <- createWorkbook(type="xlsx")
sheet <- createSheet(wb, sheetName = "example1")
# Add header
xlsx.addHeader(wb, sheet, " Add paragraph", level=2, underline=1)
xlsx.addLineBreak(sheet, 2)
paragraph="Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged."
xlsx.addParagraph(wb, sheet, paragraph, fontSize=14, isItalic=TRUE,
fontColor="darkred", startRow=3,startCol=3,colSpan=10, rowSpan=10)
saveWorkbook(wb, "examples_add_paragraph.xlsx")
wb <- createWorkbook(type="xlsx")
sheet <- createSheet(wb, sheetName = "example1")
# Add header
xlsx.addHeader(wb, sheet, " Add paragraph", level=2, underline=1)
xlsx.addLineBreak(sheet, 2)
paragraph="Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged."
xlsx.addParagraph(wb, sheet, paragraph, fontSize=14, isItalic=TRUE,
fontColor="darkred", startRow=3,startCol=3,colSpan=10, rowSpan=10)
saveWorkbook(wb, "examples_add_paragraph.xlsx")
wb <- createWorkbook(type="xlsx")
sheet <- createSheet(wb, sheetName = "example1")
install.packages("openxlsx")
install.packages("openxlsx")
library(openxlsx)
rm(list = ls(all.names = TRUE))
#### 1 ####
# create workbook and sheet
wb <- createWorkbook(type="xlsx")
sheet <- createSheet(wb, sheetName = "example1")
install.packages("xlsx")
install.packages("xlsx")
library(xlsx)
library(openxlsx)
library("xlsx")
library(openxlsx)
install.packages("devtools")
devtools::install_github("kassambara/r2excel")
install.packages("devtools")
devtools::install_github("kassambara/r2excel")
library(r2excel)
library("r2excel")
devtools::install_github("kassambara/r2excel")
install.packages("remotes")
remotes::install_github("kassambara/r2excel")
library(rJava)
install.packages("devtools")
library(devtools)
install_github("kassambara/r2excel")
install.packages("devtools")
library(devtools)
install_github("kassambara/r2excel")
library(openxlsx)
wb <- createWorkbook(type="xlsx")
?createWorkbook
wb <- createWorkbook(type=="xlsx")
wb <- createWorkbook()
sheet <- createSheet(wb, sheetName = "example1")
install.packages("devtools")
devtools::install_github("kassambara/r2excel")
install.packages("devtools")
devtools::install_github("kassambara/r2excel")
wb <- createWorkbook(type="xlsx")
sheet <- createSheet(wb, sheetName = "example1")
setwd("/Users/chloe/Documents/GitHub/Coursera/Foundations of strategic business analytics/Week1")
data=read.table('DATA_2.01_SKU.csv', header = T,sep=',') # The function read.table enables us to read flat files such as .csv files
summary(data)
str(data)
std(data$ADS)
plot(data$CV, data$ADS, main = "SKU Example", ylab="Average Daily Sales", xlab= "Coefficient of Variation")
abline(v=0.2, col = "red") # we can draw a vertical line by using the abline function and passing it the v argument
abline(h=4, col="red") # we can draw a horizontal line by using the abline function and passing it the h argument
text(0.15,9.7, "Horses", col = "red") # we can add some text to our plot by using the text() function, here to label the group "Horses"
text(0.65,9, "Wild Bulls", col = "red") # and group "Wild Bulls"
text(0.8,2, "Crickets", col = "red") # and group "Crickets"
testdata=data  # To keep our dataset safe, let's create a copy of it called "testdata"
testdata = scale(testdata) # To keep our dataset safe, let's create a copy of it called "testdata"
d = dist(testdata, method = "euclidean") # the dist() function computes the distances of all the observations in our dataset
hcward = hclust(d, method="ward.D") # hclust() function performs hiearchical clustering, we pass it the distances, and we set the method argument to "ward.D"
data$groups<-cutree(hcward,k=3) # assign our points to our k=3 clusters
d = dist(testdata, method = "euclidean") # the dist() function computes the distances of all the observations in our dataset
hcward = hclust(d, method="ward.D") # hclust() function performs hiearchical clustering, we pass it the distances, and we set the method argument to "ward.D"
data$groups<-cutree(hcward,k=3) # assign our points to our k=3 clusters
data$groups2<-cutree(hcward,k=2) # assign our points to our k=2 clusters (quiz)
library(lattice) # load the lattice package by using the library() function and passing it the name of the package you wish to load
xyplot(ADS ~ CV, data, groups = data$groups)
xyplot(ADS ~ CV, data, groups = data$groups2)
xyplot(ADS ~ CV, data, groups = data$groups)
rm(list=ls(all=TRUE))
# Let's load our dataset and call it data
data=read.table('DATA_2.02_HR.csv',header = T,sep=',') # The function read.table enables us to read flat files such as .csv files
View(data)
xyplot(NP ~ LPE, data)
testdata=data[,1:3] # To keep our dataset safe, let's create a copy of it called "testdata"
testdata = scale(testdata) # the scale function automatically performs data normalization on all your variables
d = dist(testdata, method = "euclidean") # the dist() function computes the distances of all the observations in our dataset
hcward = hclust(d, method="ward.D") # hclust() function performs hiearchical clustering, we pass it the distances, and we set the method argument to "ward.D"
data$groups = cutree(hcward,k=2) # assign our points to our k=2 clusters
aggdata = aggregate(.~ groups, data=data, FUN=mean) # The aggregate() function presents a summary of a statistic, broken down by one or more groups. Here we compute the mean of each variable for each group.
View(aggdata)
aggdata = aggregate(.~ groups, data=data, FUN=median) # The aggregate() function presents a summary of a statistic, broken down by one or more groups. Here we compute the mean of each variable for each group.
View(aggdata)
rm(list=ls(all=TRUE))
# Let's load the data
data=read.table('DATA_2.03_Telco.csv', header = T,sep=',')# The function read.table enables us to read flat files such as .csv files
rm(list=ls(all=TRUE))
# Let's load our dataset
data=read.table('DATA_2.01_SKU.csv', header = T,sep=',') # The function read.table enables us to read flat files such as .csv files
summary(data) # The summary() function provides for each variable in your dataset the minimum, mean, maximum and quartiles
rm(list=ls(all=TRUE))
# Let's load the data
data=read.table('DATA_2.03_Telco.csv', header = T,sep=',')# The function read.table enables us to read flat files such as .csv files
# Now let's have a look at our variables and see some summary statistics
str(data) # The str() function shows the structure of your dataset and details the type of variables that it contains
summary(data) # The summary() function provides for each variable in your dataset the minimum, mean, maximum and quartiles
# Now let's normalize our variables
testdata=data # To keep our dataset safe, let's create a copy of it called "testdata"
testdata = scale(testdata) # the scale function automatically performs data normalization on all your variables
d = dist(testdata, method = "euclidean") # the dist() function computes the distances of all the observations in our dataset
hcward = hclust(d, method="ward.D") # hclust() function performs hiearchical clustering, we pass it the distances, and we set the method argument to "ward.D"
data$groups=cutree(hcward,k=8) # assign our points to our k=8 clusters
aggdata= aggregate(.~ groups, data=data, FUN=mean) # Aggregation by group and computation of the mean values
proptemp=aggregate(Calls~ groups, data=data, FUN=length) # Computation of the number of observations by group
aggdata$proportion=(proptemp$Calls)/sum(proptemp$Calls) # Computation of the proportion by group
aggdata=aggdata[order(aggdata$proportion,decreasing=T),] # Ordering from the largest group to the smallest
# Let's try again with 5 segments
data$groups= cutree(hcward,k=5) #Create segments for k=5
aggdata= aggregate(.~ groups, data=data, FUN=mean) # Aggregation by group and computation of the mean values
proptemp=aggregate(Calls~ groups, data=data, FUN=length) # Computation of the number of observations by group
aggdata$proportion=(proptemp$Calls)/sum(proptemp$Calls) # Computation of the proportion by group
aggdata=aggdata[order(aggdata$proportion,decreasing=T),] # Ordering from the largest group to the smallest
View(aggdata)
summary(data$Calls)
